// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/bundles/v1beta1/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventBundleVote is an event emitted when a protocol node votes on a bundle.
type EventBundleVote struct {
	// pool_id is the unique ID of the pool.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// staker is the account staker of the protocol node.
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// storage_id is the unique ID of the bundle.
	StorageId string `protobuf:"bytes,3,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	// vote is the vote type of the protocol node.
	Vote VoteType `protobuf:"varint,4,opt,name=vote,proto3,enum=kyve.bundles.v1beta1.VoteType" json:"vote,omitempty"`
}

func (m *EventBundleVote) Reset()         { *m = EventBundleVote{} }
func (m *EventBundleVote) String() string { return proto.CompactTextString(m) }
func (*EventBundleVote) ProtoMessage()    {}
func (*EventBundleVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02f505e55d81e92, []int{0}
}
func (m *EventBundleVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBundleVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBundleVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBundleVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBundleVote.Merge(m, src)
}
func (m *EventBundleVote) XXX_Size() int {
	return m.Size()
}
func (m *EventBundleVote) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBundleVote.DiscardUnknown(m)
}

var xxx_messageInfo_EventBundleVote proto.InternalMessageInfo

func (m *EventBundleVote) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventBundleVote) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *EventBundleVote) GetStorageId() string {
	if m != nil {
		return m.StorageId
	}
	return ""
}

func (m *EventBundleVote) GetVote() VoteType {
	if m != nil {
		return m.Vote
	}
	return VOTE_TYPE_UNSPECIFIED
}

// EventBundleProposed ...
type EventBundleProposed struct {
	// pool_id ...
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// id ...
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// storage_id ...
	StorageId string `protobuf:"bytes,3,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	// uploader ...
	Uploader string `protobuf:"bytes,4,opt,name=uploader,proto3" json:"uploader,omitempty"`
	// byte_size ...
	ByteSize uint64 `protobuf:"varint,5,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	// from_height ...
	FromHeight uint64 `protobuf:"varint,6,opt,name=from_height,json=fromHeight,proto3" json:"from_height,omitempty"`
	// to_height ...
	ToHeight uint64 `protobuf:"varint,7,opt,name=to_height,json=toHeight,proto3" json:"to_height,omitempty"`
	// from_key ...
	FromKey string `protobuf:"bytes,8,opt,name=from_key,json=fromKey,proto3" json:"from_key,omitempty"`
	// to_key ...
	ToKey string `protobuf:"bytes,9,opt,name=to_key,json=toKey,proto3" json:"to_key,omitempty"`
	// value ...
	Value string `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	// bundle_hash ...
	BundleHash string `protobuf:"bytes,11,opt,name=bundle_hash,json=bundleHash,proto3" json:"bundle_hash,omitempty"`
	// created_at ...
	CreatedAt uint64 `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *EventBundleProposed) Reset()         { *m = EventBundleProposed{} }
func (m *EventBundleProposed) String() string { return proto.CompactTextString(m) }
func (*EventBundleProposed) ProtoMessage()    {}
func (*EventBundleProposed) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02f505e55d81e92, []int{1}
}
func (m *EventBundleProposed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBundleProposed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBundleProposed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBundleProposed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBundleProposed.Merge(m, src)
}
func (m *EventBundleProposed) XXX_Size() int {
	return m.Size()
}
func (m *EventBundleProposed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBundleProposed.DiscardUnknown(m)
}

var xxx_messageInfo_EventBundleProposed proto.InternalMessageInfo

func (m *EventBundleProposed) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventBundleProposed) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventBundleProposed) GetStorageId() string {
	if m != nil {
		return m.StorageId
	}
	return ""
}

func (m *EventBundleProposed) GetUploader() string {
	if m != nil {
		return m.Uploader
	}
	return ""
}

func (m *EventBundleProposed) GetByteSize() uint64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

func (m *EventBundleProposed) GetFromHeight() uint64 {
	if m != nil {
		return m.FromHeight
	}
	return 0
}

func (m *EventBundleProposed) GetToHeight() uint64 {
	if m != nil {
		return m.ToHeight
	}
	return 0
}

func (m *EventBundleProposed) GetFromKey() string {
	if m != nil {
		return m.FromKey
	}
	return ""
}

func (m *EventBundleProposed) GetToKey() string {
	if m != nil {
		return m.ToKey
	}
	return ""
}

func (m *EventBundleProposed) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EventBundleProposed) GetBundleHash() string {
	if m != nil {
		return m.BundleHash
	}
	return ""
}

func (m *EventBundleProposed) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

// EventBundleFinalized is an event emitted when a bundle is finalised.
type EventBundleFinalized struct {
	// pool_id ...
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// id ...
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// valid ...
	Valid uint64 `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
	// invalid ...
	Invalid uint64 `protobuf:"varint,4,opt,name=invalid,proto3" json:"invalid,omitempty"`
	// abstain ...
	Abstain uint64 `protobuf:"varint,5,opt,name=abstain,proto3" json:"abstain,omitempty"`
	// total ...
	Total uint64 `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	// status ...
	Status BundleStatus `protobuf:"varint,7,opt,name=status,proto3,enum=kyve.bundles.v1beta1.BundleStatus" json:"status,omitempty"`
	// rewardTreasury ...
	RewardTreasury uint64 `protobuf:"varint,8,opt,name=reward_treasury,json=rewardTreasury,proto3" json:"reward_treasury,omitempty"`
	// rewardUploader ...
	RewardUploader uint64 `protobuf:"varint,9,opt,name=reward_uploader,json=rewardUploader,proto3" json:"reward_uploader,omitempty"`
	// rewardDelegation ...
	RewardDelegation uint64 `protobuf:"varint,10,opt,name=reward_delegation,json=rewardDelegation,proto3" json:"reward_delegation,omitempty"`
	// rewardTotal ...
	RewardTotal uint64 `protobuf:"varint,11,opt,name=reward_total,json=rewardTotal,proto3" json:"reward_total,omitempty"`
}

func (m *EventBundleFinalized) Reset()         { *m = EventBundleFinalized{} }
func (m *EventBundleFinalized) String() string { return proto.CompactTextString(m) }
func (*EventBundleFinalized) ProtoMessage()    {}
func (*EventBundleFinalized) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02f505e55d81e92, []int{2}
}
func (m *EventBundleFinalized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBundleFinalized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBundleFinalized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBundleFinalized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBundleFinalized.Merge(m, src)
}
func (m *EventBundleFinalized) XXX_Size() int {
	return m.Size()
}
func (m *EventBundleFinalized) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBundleFinalized.DiscardUnknown(m)
}

var xxx_messageInfo_EventBundleFinalized proto.InternalMessageInfo

func (m *EventBundleFinalized) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventBundleFinalized) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventBundleFinalized) GetValid() uint64 {
	if m != nil {
		return m.Valid
	}
	return 0
}

func (m *EventBundleFinalized) GetInvalid() uint64 {
	if m != nil {
		return m.Invalid
	}
	return 0
}

func (m *EventBundleFinalized) GetAbstain() uint64 {
	if m != nil {
		return m.Abstain
	}
	return 0
}

func (m *EventBundleFinalized) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *EventBundleFinalized) GetStatus() BundleStatus {
	if m != nil {
		return m.Status
	}
	return BUNDLE_STATUS_UNSPECIFIED
}

func (m *EventBundleFinalized) GetRewardTreasury() uint64 {
	if m != nil {
		return m.RewardTreasury
	}
	return 0
}

func (m *EventBundleFinalized) GetRewardUploader() uint64 {
	if m != nil {
		return m.RewardUploader
	}
	return 0
}

func (m *EventBundleFinalized) GetRewardDelegation() uint64 {
	if m != nil {
		return m.RewardDelegation
	}
	return 0
}

func (m *EventBundleFinalized) GetRewardTotal() uint64 {
	if m != nil {
		return m.RewardTotal
	}
	return 0
}

// EventSkippedUploaderRole is an event emitted when an uploader skips the upload
type EventSkippedUploaderRole struct {
	// pool_id ...
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// id ...
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// previous_uploader ...
	PreviousUploader string `protobuf:"bytes,3,opt,name=previous_uploader,json=previousUploader,proto3" json:"previous_uploader,omitempty"`
	// new_uploader ...
	NewUploader string `protobuf:"bytes,4,opt,name=new_uploader,json=newUploader,proto3" json:"new_uploader,omitempty"`
}

func (m *EventSkippedUploaderRole) Reset()         { *m = EventSkippedUploaderRole{} }
func (m *EventSkippedUploaderRole) String() string { return proto.CompactTextString(m) }
func (*EventSkippedUploaderRole) ProtoMessage()    {}
func (*EventSkippedUploaderRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02f505e55d81e92, []int{3}
}
func (m *EventSkippedUploaderRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSkippedUploaderRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSkippedUploaderRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSkippedUploaderRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSkippedUploaderRole.Merge(m, src)
}
func (m *EventSkippedUploaderRole) XXX_Size() int {
	return m.Size()
}
func (m *EventSkippedUploaderRole) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSkippedUploaderRole.DiscardUnknown(m)
}

var xxx_messageInfo_EventSkippedUploaderRole proto.InternalMessageInfo

func (m *EventSkippedUploaderRole) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventSkippedUploaderRole) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventSkippedUploaderRole) GetPreviousUploader() string {
	if m != nil {
		return m.PreviousUploader
	}
	return ""
}

func (m *EventSkippedUploaderRole) GetNewUploader() string {
	if m != nil {
		return m.NewUploader
	}
	return ""
}

func init() {
	proto.RegisterType((*EventBundleVote)(nil), "kyve.bundles.v1beta1.EventBundleVote")
	proto.RegisterType((*EventBundleProposed)(nil), "kyve.bundles.v1beta1.EventBundleProposed")
	proto.RegisterType((*EventBundleFinalized)(nil), "kyve.bundles.v1beta1.EventBundleFinalized")
	proto.RegisterType((*EventSkippedUploaderRole)(nil), "kyve.bundles.v1beta1.EventSkippedUploaderRole")
}

func init() { proto.RegisterFile("kyve/bundles/v1beta1/events.proto", fileDescriptor_a02f505e55d81e92) }

var fileDescriptor_a02f505e55d81e92 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x5c,
	0x10, 0xad, 0xf3, 0xb9, 0x49, 0x3c, 0xa9, 0xd2, 0xd6, 0x5f, 0x01, 0x53, 0x54, 0xd3, 0x66, 0x43,
	0xa5, 0xa2, 0x44, 0x2d, 0x3b, 0x76, 0x54, 0xb4, 0x6a, 0x55, 0x09, 0x21, 0xb7, 0x54, 0x82, 0x8d,
	0x75, 0x53, 0x0f, 0xf1, 0x55, 0x5c, 0x5f, 0xcb, 0x1e, 0x27, 0x4d, 0x9f, 0x02, 0x09, 0xf1, 0x4e,
	0x2c, 0xbb, 0x64, 0xc1, 0x02, 0xb5, 0xcf, 0x81, 0x84, 0xee, 0x8f, 0x43, 0x84, 0x82, 0x80, 0xe5,
	0x9c, 0x73, 0xc6, 0x73, 0xe6, 0x78, 0x74, 0x61, 0x6b, 0x38, 0x19, 0x61, 0xaf, 0x5f, 0xa6, 0x51,
	0x82, 0x45, 0x6f, 0xb4, 0xdb, 0x47, 0x62, 0xbb, 0x3d, 0x1c, 0x61, 0x4a, 0x45, 0x37, 0xcb, 0x05,
	0x09, 0x77, 0x4d, 0x4a, 0xba, 0x46, 0xd2, 0x35, 0x92, 0xf5, 0xce, 0xdc, 0xc6, 0x4a, 0xa5, 0x3a,
	0xd7, 0x37, 0xe6, 0x6a, 0xe8, 0x4a, 0xd3, 0x9d, 0x4f, 0x16, 0x2c, 0x1f, 0xc8, 0x49, 0xfb, 0x4a,
	0x71, 0x2e, 0x08, 0xdd, 0x07, 0xd0, 0xc8, 0x84, 0x48, 0x42, 0x1e, 0x79, 0xd6, 0xa6, 0xb5, 0x6d,
	0x07, 0x75, 0x59, 0x1e, 0x47, 0xee, 0x7d, 0xa8, 0x17, 0xc4, 0x86, 0x98, 0x7b, 0xb5, 0x4d, 0x6b,
	0xdb, 0x09, 0x4c, 0xe5, 0x6e, 0x00, 0x14, 0x24, 0x72, 0x36, 0x40, 0xd9, 0xf3, 0x9f, 0xe2, 0x1c,
	0x83, 0x1c, 0x47, 0xee, 0x1e, 0xd8, 0x23, 0x41, 0xe8, 0xd9, 0x9b, 0xd6, 0x76, 0x7b, 0xcf, 0xef,
	0xce, 0xdb, 0xa5, 0x2b, 0x27, 0x9f, 0x4d, 0x32, 0x0c, 0x94, 0xb6, 0xf3, 0xb5, 0x06, 0xff, 0xcf,
	0xf8, 0x7a, 0x9d, 0x8b, 0x4c, 0x14, 0x18, 0xfd, 0xde, 0x5b, 0x1b, 0x6a, 0x3c, 0x52, 0xbe, 0xec,
	0xa0, 0xc6, 0xa3, 0x3f, 0x79, 0x5a, 0x87, 0x66, 0x99, 0x25, 0x82, 0x45, 0x98, 0x2b, 0x5f, 0x4e,
	0x30, 0xad, 0xdd, 0x47, 0xe0, 0xf4, 0x27, 0x84, 0x61, 0xc1, 0xaf, 0xd1, 0x5b, 0x54, 0x5f, 0x6c,
	0x4a, 0xe0, 0x94, 0x5f, 0xa3, 0xfb, 0x18, 0x5a, 0xef, 0x73, 0x71, 0x19, 0xc6, 0xc8, 0x07, 0x31,
	0x79, 0x75, 0x45, 0x83, 0x84, 0x8e, 0x14, 0x22, 0xbb, 0x49, 0x54, 0x74, 0x43, 0x77, 0x93, 0x30,
	0xe4, 0x43, 0x68, 0xaa, 0xee, 0x21, 0x4e, 0xbc, 0xa6, 0x1a, 0xdb, 0x90, 0xf5, 0x09, 0x4e, 0xdc,
	0x7b, 0x50, 0x27, 0xa1, 0x08, 0x47, 0x11, 0x8b, 0x24, 0x24, 0xbc, 0x06, 0x8b, 0x23, 0x96, 0x94,
	0xe8, 0x81, 0x46, 0x55, 0x21, 0x5d, 0xe8, 0x00, 0xc3, 0x98, 0x15, 0xb1, 0xd7, 0x52, 0x1c, 0x68,
	0xe8, 0x88, 0x15, 0xb1, 0x5c, 0xff, 0x22, 0x47, 0x46, 0x18, 0x85, 0x8c, 0xbc, 0x25, 0x65, 0xc3,
	0x31, 0xc8, 0x0b, 0xea, 0x7c, 0xaf, 0xc1, 0xda, 0x4c, 0xbc, 0x87, 0x3c, 0x65, 0x09, 0xbf, 0xfe,
	0x97, 0x7c, 0xb5, 0x2f, 0x13, 0xad, 0x1d, 0xe8, 0xc2, 0xf5, 0xa0, 0xc1, 0x53, 0x8d, 0xdb, 0x0a,
	0xaf, 0x4a, 0xc9, 0xb0, 0x7e, 0x41, 0x8c, 0xa7, 0x26, 0xd2, 0xaa, 0x94, 0x5f, 0x22, 0x41, 0x2c,
	0x31, 0x59, 0xea, 0xc2, 0x7d, 0xae, 0x6e, 0x8d, 0xca, 0x42, 0x65, 0xd8, 0xde, 0xeb, 0xcc, 0x3f,
	0x1b, 0xed, 0xff, 0x54, 0x29, 0x03, 0xd3, 0xe1, 0x3e, 0x81, 0xe5, 0x1c, 0xc7, 0x2c, 0x8f, 0x42,
	0xca, 0x91, 0x15, 0x65, 0xae, 0xc3, 0xb6, 0x83, 0xb6, 0x86, 0xcf, 0x0c, 0x3a, 0x23, 0x9c, 0x1e,
	0x83, 0x33, 0x2b, 0x7c, 0x53, 0x9d, 0xc4, 0x0e, 0xac, 0x1a, 0x61, 0x84, 0x09, 0x0e, 0x18, 0x71,
	0x91, 0xaa, 0x3f, 0x62, 0x07, 0x2b, 0x9a, 0x78, 0x39, 0xc5, 0xdd, 0x2d, 0x58, 0xaa, 0xc6, 0xab,
	0xbd, 0x5a, 0x4a, 0xd7, 0x32, 0xb3, 0x25, 0xd4, 0xf9, 0x68, 0x81, 0xa7, 0xf2, 0x3f, 0x1d, 0xf2,
	0x2c, 0xc3, 0xe9, 0xa0, 0x40, 0x24, 0xf8, 0xf7, 0xff, 0x60, 0x07, 0x56, 0xb3, 0x1c, 0x47, 0x5c,
	0x94, 0xc5, 0xcf, 0x05, 0xf4, 0xa9, 0xaf, 0x54, 0xc4, 0x74, 0x85, 0x2d, 0x58, 0x4a, 0x71, 0x1c,
	0xfe, 0x72, 0xf5, 0xad, 0x14, 0xc7, 0x95, 0x64, 0xff, 0xf0, 0xf3, 0xad, 0x6f, 0xdd, 0xdc, 0xfa,
	0xd6, 0xb7, 0x5b, 0xdf, 0xfa, 0x70, 0xe7, 0x2f, 0xdc, 0xdc, 0xf9, 0x0b, 0x5f, 0xee, 0xfc, 0x85,
	0x77, 0x4f, 0x07, 0x9c, 0xe2, 0xb2, 0xdf, 0xbd, 0x10, 0x97, 0xbd, 0x93, 0xb7, 0xe7, 0x07, 0xaf,
	0x90, 0xc6, 0x22, 0x1f, 0xf6, 0x2e, 0x62, 0xc6, 0xd3, 0xde, 0xd5, 0xf4, 0x7d, 0xa1, 0x49, 0x86,
	0x45, 0xbf, 0xae, 0xde, 0x96, 0x67, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xc9, 0x6f, 0x1f,
	0xd9, 0x04, 0x00, 0x00,
}

func (m *EventBundleVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBundleVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBundleVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StorageId) > 0 {
		i -= len(m.StorageId)
		copy(dAtA[i:], m.StorageId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StorageId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventBundleProposed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBundleProposed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBundleProposed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.BundleHash) > 0 {
		i -= len(m.BundleHash)
		copy(dAtA[i:], m.BundleHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BundleHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ToKey) > 0 {
		i -= len(m.ToKey)
		copy(dAtA[i:], m.ToKey)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ToKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FromKey) > 0 {
		i -= len(m.FromKey)
		copy(dAtA[i:], m.FromKey)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FromKey)))
		i--
		dAtA[i] = 0x42
	}
	if m.ToHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ToHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.FromHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FromHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.ByteSize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ByteSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Uploader) > 0 {
		i -= len(m.Uploader)
		copy(dAtA[i:], m.Uploader)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Uploader)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StorageId) > 0 {
		i -= len(m.StorageId)
		copy(dAtA[i:], m.StorageId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StorageId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventBundleFinalized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBundleFinalized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBundleFinalized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardTotal != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RewardTotal))
		i--
		dAtA[i] = 0x58
	}
	if m.RewardDelegation != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RewardDelegation))
		i--
		dAtA[i] = 0x50
	}
	if m.RewardUploader != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RewardUploader))
		i--
		dAtA[i] = 0x48
	}
	if m.RewardTreasury != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RewardTreasury))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.Total != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x30
	}
	if m.Abstain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Abstain))
		i--
		dAtA[i] = 0x28
	}
	if m.Invalid != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Invalid))
		i--
		dAtA[i] = 0x20
	}
	if m.Valid != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Valid))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSkippedUploaderRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSkippedUploaderRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSkippedUploaderRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewUploader) > 0 {
		i -= len(m.NewUploader)
		copy(dAtA[i:], m.NewUploader)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewUploader)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PreviousUploader) > 0 {
		i -= len(m.PreviousUploader)
		copy(dAtA[i:], m.PreviousUploader)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PreviousUploader)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventBundleVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StorageId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Vote != 0 {
		n += 1 + sovEvents(uint64(m.Vote))
	}
	return n
}

func (m *EventBundleProposed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.StorageId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Uploader)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ByteSize != 0 {
		n += 1 + sovEvents(uint64(m.ByteSize))
	}
	if m.FromHeight != 0 {
		n += 1 + sovEvents(uint64(m.FromHeight))
	}
	if m.ToHeight != 0 {
		n += 1 + sovEvents(uint64(m.ToHeight))
	}
	l = len(m.FromKey)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ToKey)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.BundleHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovEvents(uint64(m.CreatedAt))
	}
	return n
}

func (m *EventBundleFinalized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.Valid != 0 {
		n += 1 + sovEvents(uint64(m.Valid))
	}
	if m.Invalid != 0 {
		n += 1 + sovEvents(uint64(m.Invalid))
	}
	if m.Abstain != 0 {
		n += 1 + sovEvents(uint64(m.Abstain))
	}
	if m.Total != 0 {
		n += 1 + sovEvents(uint64(m.Total))
	}
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	if m.RewardTreasury != 0 {
		n += 1 + sovEvents(uint64(m.RewardTreasury))
	}
	if m.RewardUploader != 0 {
		n += 1 + sovEvents(uint64(m.RewardUploader))
	}
	if m.RewardDelegation != 0 {
		n += 1 + sovEvents(uint64(m.RewardDelegation))
	}
	if m.RewardTotal != 0 {
		n += 1 + sovEvents(uint64(m.RewardTotal))
	}
	return n
}

func (m *EventSkippedUploaderRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.PreviousUploader)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewUploader)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventBundleVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBundleVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBundleVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= VoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBundleProposed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBundleProposed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBundleProposed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uploader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uploader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHeight", wireType)
			}
			m.FromHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHeight", wireType)
			}
			m.ToHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBundleFinalized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBundleFinalized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBundleFinalized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			m.Valid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Valid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invalid", wireType)
			}
			m.Invalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invalid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abstain", wireType)
			}
			m.Abstain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Abstain |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BundleStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTreasury", wireType)
			}
			m.RewardTreasury = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardTreasury |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardUploader", wireType)
			}
			m.RewardUploader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardUploader |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDelegation", wireType)
			}
			m.RewardDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTotal", wireType)
			}
			m.RewardTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSkippedUploaderRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSkippedUploaderRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSkippedUploaderRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousUploader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousUploader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewUploader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewUploader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
