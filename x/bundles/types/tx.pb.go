// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/bundles/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VoteType ...
type VoteType int32

const (
	// VOTE_TYPE_UNSPECIFIED ...
	VOTE_TYPE_UNSPECIFIED VoteType = 0
	// VOTE_TYPE_YES ...
	VOTE_TYPE_YES VoteType = 1
	// VOTE_TYPE_NO ...
	VOTE_TYPE_NO VoteType = 2
	// VOTE_TYPE_ABSTAIN ...
	VOTE_TYPE_ABSTAIN VoteType = 3
)

var VoteType_name = map[int32]string{
	0: "VOTE_TYPE_UNSPECIFIED",
	1: "VOTE_TYPE_YES",
	2: "VOTE_TYPE_NO",
	3: "VOTE_TYPE_ABSTAIN",
}

var VoteType_value = map[string]int32{
	"VOTE_TYPE_UNSPECIFIED": 0,
	"VOTE_TYPE_YES":         1,
	"VOTE_TYPE_NO":          2,
	"VOTE_TYPE_ABSTAIN":     3,
}

func (x VoteType) String() string {
	return proto.EnumName(VoteType_name, int32(x))
}

func (VoteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{0}
}

// MsgSubmitBundleProposal defines a SDK message for submitting a bundle proposal.
type MsgSubmitBundleProposal struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// pool_id ...
	PoolId uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// storage_id ...
	StorageId string `protobuf:"bytes,4,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	// byte_size ...
	ByteSize uint64 `protobuf:"varint,5,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	// from_height
	FromHeight uint64 `protobuf:"varint,6,opt,name=from_height,json=fromHeight,proto3" json:"from_height,omitempty"`
	// to_height ...
	ToHeight uint64 `protobuf:"varint,7,opt,name=to_height,json=toHeight,proto3" json:"to_height,omitempty"`
	// from_key
	FromKey string `protobuf:"bytes,8,opt,name=from_key,json=fromKey,proto3" json:"from_key,omitempty"`
	// to_key ...
	ToKey string `protobuf:"bytes,9,opt,name=to_key,json=toKey,proto3" json:"to_key,omitempty"`
	// to_value ...
	ToValue string `protobuf:"bytes,10,opt,name=to_value,json=toValue,proto3" json:"to_value,omitempty"`
	// bundle_hash ...
	BundleHash string `protobuf:"bytes,11,opt,name=bundle_hash,json=bundleHash,proto3" json:"bundle_hash,omitempty"`
}

func (m *MsgSubmitBundleProposal) Reset()         { *m = MsgSubmitBundleProposal{} }
func (m *MsgSubmitBundleProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBundleProposal) ProtoMessage()    {}
func (*MsgSubmitBundleProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{0}
}
func (m *MsgSubmitBundleProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBundleProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBundleProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBundleProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBundleProposal.Merge(m, src)
}
func (m *MsgSubmitBundleProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBundleProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBundleProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBundleProposal proto.InternalMessageInfo

func (m *MsgSubmitBundleProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitBundleProposal) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *MsgSubmitBundleProposal) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgSubmitBundleProposal) GetStorageId() string {
	if m != nil {
		return m.StorageId
	}
	return ""
}

func (m *MsgSubmitBundleProposal) GetByteSize() uint64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

func (m *MsgSubmitBundleProposal) GetFromHeight() uint64 {
	if m != nil {
		return m.FromHeight
	}
	return 0
}

func (m *MsgSubmitBundleProposal) GetToHeight() uint64 {
	if m != nil {
		return m.ToHeight
	}
	return 0
}

func (m *MsgSubmitBundleProposal) GetFromKey() string {
	if m != nil {
		return m.FromKey
	}
	return ""
}

func (m *MsgSubmitBundleProposal) GetToKey() string {
	if m != nil {
		return m.ToKey
	}
	return ""
}

func (m *MsgSubmitBundleProposal) GetToValue() string {
	if m != nil {
		return m.ToValue
	}
	return ""
}

func (m *MsgSubmitBundleProposal) GetBundleHash() string {
	if m != nil {
		return m.BundleHash
	}
	return ""
}

// MsgSubmitBundleProposalResponse defines the Msg/SubmitBundleProposal response type.
type MsgSubmitBundleProposalResponse struct {
}

func (m *MsgSubmitBundleProposalResponse) Reset()         { *m = MsgSubmitBundleProposalResponse{} }
func (m *MsgSubmitBundleProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBundleProposalResponse) ProtoMessage()    {}
func (*MsgSubmitBundleProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{1}
}
func (m *MsgSubmitBundleProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBundleProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBundleProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBundleProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBundleProposalResponse.Merge(m, src)
}
func (m *MsgSubmitBundleProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBundleProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBundleProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBundleProposalResponse proto.InternalMessageInfo

// MsgVoteBundleProposal defines a SDK message for voting on a bundle proposal.
type MsgVoteBundleProposal struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// id ...
	PoolId uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// storage_id ...
	StorageId string `protobuf:"bytes,4,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	// vote ...
	Vote VoteType `protobuf:"varint,5,opt,name=vote,proto3,enum=kyve.bundles.v1beta1.VoteType" json:"vote,omitempty"`
}

func (m *MsgVoteBundleProposal) Reset()         { *m = MsgVoteBundleProposal{} }
func (m *MsgVoteBundleProposal) String() string { return proto.CompactTextString(m) }
func (*MsgVoteBundleProposal) ProtoMessage()    {}
func (*MsgVoteBundleProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{2}
}
func (m *MsgVoteBundleProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteBundleProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteBundleProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteBundleProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteBundleProposal.Merge(m, src)
}
func (m *MsgVoteBundleProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteBundleProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteBundleProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteBundleProposal proto.InternalMessageInfo

func (m *MsgVoteBundleProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVoteBundleProposal) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *MsgVoteBundleProposal) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgVoteBundleProposal) GetStorageId() string {
	if m != nil {
		return m.StorageId
	}
	return ""
}

func (m *MsgVoteBundleProposal) GetVote() VoteType {
	if m != nil {
		return m.Vote
	}
	return VOTE_TYPE_UNSPECIFIED
}

// MsgVoteBundleProposalResponse defines the Msg/VoteBundleProposal response type.
type MsgVoteBundleProposalResponse struct {
}

func (m *MsgVoteBundleProposalResponse) Reset()         { *m = MsgVoteBundleProposalResponse{} }
func (m *MsgVoteBundleProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteBundleProposalResponse) ProtoMessage()    {}
func (*MsgVoteBundleProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{3}
}
func (m *MsgVoteBundleProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteBundleProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteBundleProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteBundleProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteBundleProposalResponse.Merge(m, src)
}
func (m *MsgVoteBundleProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteBundleProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteBundleProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteBundleProposalResponse proto.InternalMessageInfo

// MsgClaimUploaderRole defines a SDK message for claiming the uploader role.
type MsgClaimUploaderRole struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// id ...
	PoolId uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *MsgClaimUploaderRole) Reset()         { *m = MsgClaimUploaderRole{} }
func (m *MsgClaimUploaderRole) String() string { return proto.CompactTextString(m) }
func (*MsgClaimUploaderRole) ProtoMessage()    {}
func (*MsgClaimUploaderRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{4}
}
func (m *MsgClaimUploaderRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimUploaderRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimUploaderRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimUploaderRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimUploaderRole.Merge(m, src)
}
func (m *MsgClaimUploaderRole) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimUploaderRole) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimUploaderRole.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimUploaderRole proto.InternalMessageInfo

func (m *MsgClaimUploaderRole) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimUploaderRole) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *MsgClaimUploaderRole) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// MsgClaimUploaderRoleResponse defines the Msg/ClaimUploaderRole response type.
type MsgClaimUploaderRoleResponse struct {
}

func (m *MsgClaimUploaderRoleResponse) Reset()         { *m = MsgClaimUploaderRoleResponse{} }
func (m *MsgClaimUploaderRoleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimUploaderRoleResponse) ProtoMessage()    {}
func (*MsgClaimUploaderRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{5}
}
func (m *MsgClaimUploaderRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimUploaderRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimUploaderRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimUploaderRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimUploaderRoleResponse.Merge(m, src)
}
func (m *MsgClaimUploaderRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimUploaderRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimUploaderRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimUploaderRoleResponse proto.InternalMessageInfo

// MsgSubmitBundleProposal defines a SDK message for submitting a bundle proposal.
type MsgSkipUploaderRole struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// pool_id ...
	PoolId uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// from_height ...
	FromHeight uint64 `protobuf:"varint,4,opt,name=from_height,json=fromHeight,proto3" json:"from_height,omitempty"`
}

func (m *MsgSkipUploaderRole) Reset()         { *m = MsgSkipUploaderRole{} }
func (m *MsgSkipUploaderRole) String() string { return proto.CompactTextString(m) }
func (*MsgSkipUploaderRole) ProtoMessage()    {}
func (*MsgSkipUploaderRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{6}
}
func (m *MsgSkipUploaderRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSkipUploaderRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSkipUploaderRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSkipUploaderRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSkipUploaderRole.Merge(m, src)
}
func (m *MsgSkipUploaderRole) XXX_Size() int {
	return m.Size()
}
func (m *MsgSkipUploaderRole) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSkipUploaderRole.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSkipUploaderRole proto.InternalMessageInfo

func (m *MsgSkipUploaderRole) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSkipUploaderRole) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *MsgSkipUploaderRole) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgSkipUploaderRole) GetFromHeight() uint64 {
	if m != nil {
		return m.FromHeight
	}
	return 0
}

// MsgSubmitBundleProposalResponse defines the Msg/SubmitBundleProposal response type.
type MsgSkipUploaderRoleResponse struct {
}

func (m *MsgSkipUploaderRoleResponse) Reset()         { *m = MsgSkipUploaderRoleResponse{} }
func (m *MsgSkipUploaderRoleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSkipUploaderRoleResponse) ProtoMessage()    {}
func (*MsgSkipUploaderRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed52bfae1633bf9, []int{7}
}
func (m *MsgSkipUploaderRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSkipUploaderRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSkipUploaderRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSkipUploaderRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSkipUploaderRoleResponse.Merge(m, src)
}
func (m *MsgSkipUploaderRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSkipUploaderRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSkipUploaderRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSkipUploaderRoleResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("kyve.bundles.v1beta1.VoteType", VoteType_name, VoteType_value)
	proto.RegisterType((*MsgSubmitBundleProposal)(nil), "kyve.bundles.v1beta1.MsgSubmitBundleProposal")
	proto.RegisterType((*MsgSubmitBundleProposalResponse)(nil), "kyve.bundles.v1beta1.MsgSubmitBundleProposalResponse")
	proto.RegisterType((*MsgVoteBundleProposal)(nil), "kyve.bundles.v1beta1.MsgVoteBundleProposal")
	proto.RegisterType((*MsgVoteBundleProposalResponse)(nil), "kyve.bundles.v1beta1.MsgVoteBundleProposalResponse")
	proto.RegisterType((*MsgClaimUploaderRole)(nil), "kyve.bundles.v1beta1.MsgClaimUploaderRole")
	proto.RegisterType((*MsgClaimUploaderRoleResponse)(nil), "kyve.bundles.v1beta1.MsgClaimUploaderRoleResponse")
	proto.RegisterType((*MsgSkipUploaderRole)(nil), "kyve.bundles.v1beta1.MsgSkipUploaderRole")
	proto.RegisterType((*MsgSkipUploaderRoleResponse)(nil), "kyve.bundles.v1beta1.MsgSkipUploaderRoleResponse")
}

func init() { proto.RegisterFile("kyve/bundles/v1beta1/tx.proto", fileDescriptor_9ed52bfae1633bf9) }

var fileDescriptor_9ed52bfae1633bf9 = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xc1, 0x4e, 0x1a, 0x51,
	0x14, 0x65, 0x04, 0x11, 0xae, 0x6d, 0x83, 0xaf, 0x50, 0x47, 0x2c, 0xa3, 0x65, 0x65, 0x6d, 0xcb,
	0x44, 0x4c, 0x3f, 0x40, 0x2d, 0x46, 0x62, 0x40, 0x03, 0x48, 0x62, 0x37, 0x93, 0x41, 0x5e, 0x67,
	0x26, 0x0c, 0xde, 0xc9, 0xbc, 0x07, 0x15, 0xd3, 0x4d, 0x77, 0x5d, 0xf6, 0x1f, 0xfa, 0x0d, 0xfd,
	0x87, 0x2e, 0xba, 0x70, 0xd9, 0x65, 0x83, 0x3f, 0xd2, 0xbc, 0x37, 0x80, 0x09, 0x0c, 0x89, 0x26,
	0x6d, 0xba, 0xe3, 0x9e, 0x73, 0xee, 0xdc, 0x7b, 0x0f, 0x67, 0x32, 0x90, 0xeb, 0x0c, 0xfa, 0x54,
	0x6f, 0xf5, 0x2e, 0xdb, 0x2e, 0x65, 0x7a, 0x7f, 0xa7, 0x45, 0xb9, 0xb9, 0xa3, 0xf3, 0xab, 0x82,
	0xe7, 0x23, 0x47, 0x92, 0x16, 0x74, 0x61, 0x44, 0x17, 0x46, 0x74, 0x36, 0x6d, 0xa1, 0x85, 0x52,
	0xa0, 0x8b, 0x5f, 0x81, 0x36, 0xff, 0x73, 0x01, 0x56, 0x2b, 0xcc, 0xaa, 0xf7, 0x5a, 0x5d, 0x87,
	0xef, 0xcb, 0x96, 0x53, 0x1f, 0x3d, 0x64, 0xa6, 0x4b, 0x54, 0x58, 0xba, 0xf0, 0xa9, 0xc9, 0xd1,
	0x57, 0x95, 0x4d, 0x65, 0x2b, 0x59, 0x1b, 0x97, 0xe4, 0x19, 0xc4, 0x19, 0x37, 0x3b, 0xd4, 0x57,
	0x17, 0x24, 0x31, 0xaa, 0xc8, 0x2a, 0x2c, 0x79, 0x88, 0xae, 0xe1, 0xb4, 0xd5, 0xe8, 0xa6, 0xb2,
	0x15, 0xab, 0xc5, 0x45, 0x59, 0x6e, 0x93, 0x1c, 0x00, 0xe3, 0xe8, 0x9b, 0x16, 0x15, 0x5c, 0x4c,
	0x36, 0x25, 0x47, 0x48, 0xb9, 0x4d, 0xd6, 0x21, 0xd9, 0x1a, 0x70, 0x6a, 0x30, 0xe7, 0x9a, 0xaa,
	0x8b, 0xb2, 0x33, 0x21, 0x80, 0xba, 0x73, 0x4d, 0xc9, 0x06, 0x2c, 0x7f, 0xf0, 0xb1, 0x6b, 0xd8,
	0xd4, 0xb1, 0x6c, 0xae, 0xc6, 0x25, 0x0d, 0x02, 0x3a, 0x92, 0x88, 0xe8, 0xe6, 0x38, 0xa6, 0x97,
	0x82, 0x6e, 0x8e, 0x23, 0x72, 0x0d, 0x12, 0xb2, 0xbb, 0x43, 0x07, 0x6a, 0x22, 0xb8, 0x42, 0xd4,
	0xc7, 0x74, 0x40, 0x32, 0x10, 0xe7, 0x28, 0x89, 0xa4, 0x24, 0x16, 0x39, 0x0a, 0x78, 0x0d, 0x12,
	0x1c, 0x8d, 0xbe, 0xe9, 0xf6, 0xa8, 0x0a, 0x41, 0x07, 0xc7, 0xa6, 0x28, 0xc5, 0x2a, 0x81, 0xad,
	0x86, 0x6d, 0x32, 0x5b, 0x5d, 0x96, 0x2c, 0x04, 0xd0, 0x91, 0xc9, 0xec, 0xfc, 0x0b, 0xd8, 0x98,
	0xe3, 0x66, 0x8d, 0x32, 0x0f, 0x2f, 0x19, 0xcd, 0x7f, 0x57, 0x20, 0x53, 0x61, 0x56, 0x13, 0x39,
	0xfd, 0x6f, 0x7e, 0x17, 0x21, 0xd6, 0x47, 0x1e, 0x58, 0xfd, 0xa4, 0xa8, 0x15, 0xc2, 0x02, 0x53,
	0x10, 0x1b, 0x36, 0x06, 0x1e, 0xad, 0x49, 0x6d, 0x7e, 0x03, 0x72, 0xa1, 0x6b, 0x4f, 0x0e, 0x33,
	0x21, 0x5d, 0x61, 0xd6, 0x81, 0x6b, 0x3a, 0xdd, 0x33, 0xcf, 0x45, 0xb3, 0x4d, 0xfd, 0x1a, 0xba,
	0xf4, 0x2f, 0x9e, 0x95, 0xd7, 0xe0, 0x79, 0xd8, 0x88, 0xc9, 0x0a, 0x9f, 0x15, 0x78, 0x2a, 0xfc,
	0xef, 0x38, 0xde, 0x3f, 0x5a, 0x61, 0x3a, 0x8d, 0xb1, 0xe9, 0x34, 0xe6, 0x73, 0xb0, 0x1e, 0xb2,
	0xc2, 0x78, 0xc5, 0x6d, 0x0b, 0x12, 0x63, 0x63, 0xc9, 0x1a, 0x64, 0x9a, 0x27, 0x8d, 0x92, 0xd1,
	0x38, 0x3f, 0x2d, 0x19, 0x67, 0xd5, 0xfa, 0x69, 0xe9, 0xa0, 0x7c, 0x58, 0x2e, 0xbd, 0x4b, 0x45,
	0xc8, 0x0a, 0x3c, 0xbe, 0xa3, 0xce, 0x4b, 0xf5, 0x94, 0x42, 0x52, 0xf0, 0xe8, 0x0e, 0xaa, 0x9e,
	0xa4, 0x16, 0x48, 0x06, 0x56, 0xee, 0x90, 0xbd, 0xfd, 0x7a, 0x63, 0xaf, 0x5c, 0x4d, 0x45, 0xb3,
	0xb1, 0x2f, 0xdf, 0xb4, 0x48, 0x71, 0x18, 0x85, 0x68, 0x85, 0x59, 0xe4, 0x13, 0xa4, 0x43, 0xdf,
	0xee, 0x37, 0xe1, 0xff, 0xfa, 0x9c, 0xf8, 0x66, 0xdf, 0x3e, 0x48, 0x3e, 0x3e, 0x97, 0xf4, 0x81,
	0x84, 0x24, 0xfd, 0xd5, 0xdc, 0x87, 0xcd, 0x8a, 0xb3, 0xbb, 0x0f, 0x10, 0x4f, 0xe6, 0x32, 0x58,
	0x99, 0x4d, 0xe2, 0xf6, 0xdc, 0x27, 0xcd, 0x68, 0xb3, 0xc5, 0xfb, 0x6b, 0x27, 0x43, 0x3d, 0x48,
	0xcd, 0x44, 0xef, 0xe5, 0x7c, 0xdf, 0xa6, 0xa4, 0xd9, 0x9d, 0x7b, 0x4b, 0xc7, 0x13, 0xf7, 0x0f,
	0x7f, 0x0c, 0x35, 0xe5, 0x66, 0xa8, 0x29, 0xbf, 0x87, 0x9a, 0xf2, 0xf5, 0x56, 0x8b, 0xdc, 0xdc,
	0x6a, 0x91, 0x5f, 0xb7, 0x5a, 0xe4, 0xfd, 0x6b, 0xcb, 0xe1, 0x76, 0xaf, 0x55, 0xb8, 0xc0, 0xae,
	0x7e, 0x7c, 0xde, 0x2c, 0x55, 0x29, 0xff, 0x88, 0x7e, 0x47, 0xbf, 0xb0, 0x4d, 0xe7, 0x52, 0xbf,
	0x9a, 0x7c, 0x3d, 0xf8, 0xc0, 0xa3, 0xac, 0x15, 0x97, 0x5f, 0x83, 0xdd, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xf8, 0x13, 0x11, 0x10, 0x5a, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	// SubmitBundleProposal ...
	SubmitBundleProposal(ctx context.Context, in *MsgSubmitBundleProposal, opts ...grpc.CallOption) (*MsgSubmitBundleProposalResponse, error)
	// VoteBundleProposal ...
	VoteBundleProposal(ctx context.Context, in *MsgVoteBundleProposal, opts ...grpc.CallOption) (*MsgVoteBundleProposalResponse, error)
	// ClaimUploaderRole ...
	ClaimUploaderRole(ctx context.Context, in *MsgClaimUploaderRole, opts ...grpc.CallOption) (*MsgClaimUploaderRoleResponse, error)
	// SkipUploaderRole ...
	SkipUploaderRole(ctx context.Context, in *MsgSkipUploaderRole, opts ...grpc.CallOption) (*MsgSkipUploaderRoleResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitBundleProposal(ctx context.Context, in *MsgSubmitBundleProposal, opts ...grpc.CallOption) (*MsgSubmitBundleProposalResponse, error) {
	out := new(MsgSubmitBundleProposalResponse)
	err := c.cc.Invoke(ctx, "/kyve.bundles.v1beta1.Msg/SubmitBundleProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteBundleProposal(ctx context.Context, in *MsgVoteBundleProposal, opts ...grpc.CallOption) (*MsgVoteBundleProposalResponse, error) {
	out := new(MsgVoteBundleProposalResponse)
	err := c.cc.Invoke(ctx, "/kyve.bundles.v1beta1.Msg/VoteBundleProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimUploaderRole(ctx context.Context, in *MsgClaimUploaderRole, opts ...grpc.CallOption) (*MsgClaimUploaderRoleResponse, error) {
	out := new(MsgClaimUploaderRoleResponse)
	err := c.cc.Invoke(ctx, "/kyve.bundles.v1beta1.Msg/ClaimUploaderRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SkipUploaderRole(ctx context.Context, in *MsgSkipUploaderRole, opts ...grpc.CallOption) (*MsgSkipUploaderRoleResponse, error) {
	out := new(MsgSkipUploaderRoleResponse)
	err := c.cc.Invoke(ctx, "/kyve.bundles.v1beta1.Msg/SkipUploaderRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	// SubmitBundleProposal ...
	SubmitBundleProposal(context.Context, *MsgSubmitBundleProposal) (*MsgSubmitBundleProposalResponse, error)
	// VoteBundleProposal ...
	VoteBundleProposal(context.Context, *MsgVoteBundleProposal) (*MsgVoteBundleProposalResponse, error)
	// ClaimUploaderRole ...
	ClaimUploaderRole(context.Context, *MsgClaimUploaderRole) (*MsgClaimUploaderRoleResponse, error)
	// SkipUploaderRole ...
	SkipUploaderRole(context.Context, *MsgSkipUploaderRole) (*MsgSkipUploaderRoleResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitBundleProposal(ctx context.Context, req *MsgSubmitBundleProposal) (*MsgSubmitBundleProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBundleProposal not implemented")
}
func (*UnimplementedMsgServer) VoteBundleProposal(ctx context.Context, req *MsgVoteBundleProposal) (*MsgVoteBundleProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBundleProposal not implemented")
}
func (*UnimplementedMsgServer) ClaimUploaderRole(ctx context.Context, req *MsgClaimUploaderRole) (*MsgClaimUploaderRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimUploaderRole not implemented")
}
func (*UnimplementedMsgServer) SkipUploaderRole(ctx context.Context, req *MsgSkipUploaderRole) (*MsgSkipUploaderRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipUploaderRole not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitBundleProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBundleProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBundleProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.bundles.v1beta1.Msg/SubmitBundleProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBundleProposal(ctx, req.(*MsgSubmitBundleProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteBundleProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteBundleProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteBundleProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.bundles.v1beta1.Msg/VoteBundleProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteBundleProposal(ctx, req.(*MsgVoteBundleProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimUploaderRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimUploaderRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimUploaderRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.bundles.v1beta1.Msg/ClaimUploaderRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimUploaderRole(ctx, req.(*MsgClaimUploaderRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SkipUploaderRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSkipUploaderRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SkipUploaderRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.bundles.v1beta1.Msg/SkipUploaderRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SkipUploaderRole(ctx, req.(*MsgSkipUploaderRole))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.bundles.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBundleProposal",
			Handler:    _Msg_SubmitBundleProposal_Handler,
		},
		{
			MethodName: "VoteBundleProposal",
			Handler:    _Msg_VoteBundleProposal_Handler,
		},
		{
			MethodName: "ClaimUploaderRole",
			Handler:    _Msg_ClaimUploaderRole_Handler,
		},
		{
			MethodName: "SkipUploaderRole",
			Handler:    _Msg_SkipUploaderRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/bundles/v1beta1/tx.proto",
}

func (m *MsgSubmitBundleProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBundleProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBundleProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BundleHash) > 0 {
		i -= len(m.BundleHash)
		copy(dAtA[i:], m.BundleHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BundleHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ToValue) > 0 {
		i -= len(m.ToValue)
		copy(dAtA[i:], m.ToValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToValue)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ToKey) > 0 {
		i -= len(m.ToKey)
		copy(dAtA[i:], m.ToKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FromKey) > 0 {
		i -= len(m.FromKey)
		copy(dAtA[i:], m.FromKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromKey)))
		i--
		dAtA[i] = 0x42
	}
	if m.ToHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ToHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.FromHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FromHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.ByteSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ByteSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StorageId) > 0 {
		i -= len(m.StorageId)
		copy(dAtA[i:], m.StorageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StorageId)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBundleProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBundleProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBundleProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteBundleProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteBundleProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteBundleProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StorageId) > 0 {
		i -= len(m.StorageId)
		copy(dAtA[i:], m.StorageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StorageId)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteBundleProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteBundleProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteBundleProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimUploaderRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimUploaderRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimUploaderRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimUploaderRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimUploaderRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimUploaderRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSkipUploaderRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSkipUploaderRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSkipUploaderRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FromHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSkipUploaderRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSkipUploaderRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSkipUploaderRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitBundleProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = len(m.StorageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ByteSize != 0 {
		n += 1 + sovTx(uint64(m.ByteSize))
	}
	if m.FromHeight != 0 {
		n += 1 + sovTx(uint64(m.FromHeight))
	}
	if m.ToHeight != 0 {
		n += 1 + sovTx(uint64(m.ToHeight))
	}
	l = len(m.FromKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BundleHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitBundleProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteBundleProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = len(m.StorageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != 0 {
		n += 1 + sovTx(uint64(m.Vote))
	}
	return n
}

func (m *MsgVoteBundleProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimUploaderRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	return n
}

func (m *MsgClaimUploaderRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSkipUploaderRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.FromHeight != 0 {
		n += 1 + sovTx(uint64(m.FromHeight))
	}
	return n
}

func (m *MsgSkipUploaderRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitBundleProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBundleProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBundleProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHeight", wireType)
			}
			m.FromHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHeight", wireType)
			}
			m.ToHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBundleProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBundleProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBundleProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteBundleProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteBundleProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteBundleProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= VoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteBundleProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteBundleProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteBundleProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimUploaderRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimUploaderRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimUploaderRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimUploaderRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimUploaderRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimUploaderRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSkipUploaderRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSkipUploaderRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSkipUploaderRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHeight", wireType)
			}
			m.FromHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSkipUploaderRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSkipUploaderRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSkipUploaderRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
